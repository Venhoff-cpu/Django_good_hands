# Generated by Django 3.1.1 on 2020-09-18 12:17

import charity.models
import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', charity.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'Kategoria',
                'verbose_name_plural': 'Kategorie',
            },
        ),
        migrations.CreateModel(
            name='Institution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='name')),
                ('description', models.CharField(max_length=256, verbose_name='description')),
                ('type', models.CharField(choices=[('FUN', 'Fundacja'), ('NGO', 'Organizacja pozarządowa'), ('LOC', 'Lokalna zbiórka')], default='FUN', max_length=3, verbose_name='type')),
                ('categories', models.ManyToManyField(to='charity.Category', verbose_name='categories')),
            ],
            options={
                'verbose_name': 'Instytucja',
                'verbose_name_plural': 'Instytucje',
            },
        ),
        migrations.CreateModel(
            name='Donation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(validators=[django.core.validators.MinValueValidator(limit_value=1, message='Ilość oddanych worków musi być większa od 0')], verbose_name='quantity')),
                ('street', models.CharField(max_length=256, verbose_name='street')),
                ('city', models.CharField(max_length=64, verbose_name='city')),
                ('zip_code', models.CharField(max_length=6, validators=[django.core.validators.RegexValidator(message='Proszę wprowadzić kod pocztowy w odpowiednim formacie: 00-000', regex='\\d{2}-\\d{3}')], verbose_name='zip code')),
                ('phone_number', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message='Proszę podać numer komórkowy lub stacjonarny poprzedzony numerem kierunkowym, bez spacji (223334455)', regex='^\\+?1?\\d{8,15}$')], verbose_name='phone number')),
                ('pick_up_date', models.DateField(validators=[django.core.validators.MinValueValidator(limit_value=charity.models.one_day_hence, message='Data odbioru nie może być z przeszłości')], verbose_name='pick up date')),
                ('pick_up_time', models.TimeField(validators=[django.core.validators.MinValueValidator(limit_value=datetime.time(8, 0), message='Odbiór można zlecić w godzinach 8:00 - 20:00'), django.core.validators.MaxValueValidator(limit_value=datetime.time(20, 0), message='Odbiór można zlecić w godzinach 8:00 - 20:00')], verbose_name='pick up time')),
                ('pick_up_comment', models.CharField(blank=True, max_length=256, null=True, verbose_name='comment')),
                ('categories', models.ManyToManyField(to='charity.Category', verbose_name='categories')),
                ('institution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='charity.institution', verbose_name='institution')),
                ('user', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'Dotacja',
                'verbose_name_plural': 'Dotacje',
            },
        ),
    ]
